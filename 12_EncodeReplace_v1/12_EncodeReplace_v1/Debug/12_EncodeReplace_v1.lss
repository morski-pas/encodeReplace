
12_EncodeReplace_v1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  00000364  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000310  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000364  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000394  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000070  00000000  00000000  000003d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000f2e  00000000  00000000  00000444  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000d0f  00000000  00000000  00001372  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004af  00000000  00000000  00002081  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000fc  00000000  00000000  00002530  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000006fb  00000000  00000000  0000262c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001d9  00000000  00000000  00002d27  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  00002f00  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	a6 c0       	rjmp	.+332    	; 0x14e <__ctors_end>
   2:	00 00       	nop
   4:	b6 c0       	rjmp	.+364    	; 0x172 <__bad_interrupt>
   6:	00 00       	nop
   8:	b4 c0       	rjmp	.+360    	; 0x172 <__bad_interrupt>
   a:	00 00       	nop
   c:	b2 c0       	rjmp	.+356    	; 0x172 <__bad_interrupt>
   e:	00 00       	nop
  10:	b0 c0       	rjmp	.+352    	; 0x172 <__bad_interrupt>
  12:	00 00       	nop
  14:	ae c0       	rjmp	.+348    	; 0x172 <__bad_interrupt>
  16:	00 00       	nop
  18:	ac c0       	rjmp	.+344    	; 0x172 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	aa c0       	rjmp	.+340    	; 0x172 <__bad_interrupt>
  1e:	00 00       	nop
  20:	a8 c0       	rjmp	.+336    	; 0x172 <__bad_interrupt>
  22:	00 00       	nop
  24:	a6 c0       	rjmp	.+332    	; 0x172 <__bad_interrupt>
  26:	00 00       	nop
  28:	a4 c0       	rjmp	.+328    	; 0x172 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	a2 c0       	rjmp	.+324    	; 0x172 <__bad_interrupt>
  2e:	00 00       	nop
  30:	a0 c0       	rjmp	.+320    	; 0x172 <__bad_interrupt>
  32:	00 00       	nop
  34:	9e c0       	rjmp	.+316    	; 0x172 <__bad_interrupt>
  36:	00 00       	nop
  38:	9c c0       	rjmp	.+312    	; 0x172 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	9a c0       	rjmp	.+308    	; 0x172 <__bad_interrupt>
  3e:	00 00       	nop
  40:	98 c0       	rjmp	.+304    	; 0x172 <__bad_interrupt>
  42:	00 00       	nop
  44:	96 c0       	rjmp	.+300    	; 0x172 <__bad_interrupt>
  46:	00 00       	nop
  48:	94 c0       	rjmp	.+296    	; 0x172 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	92 c0       	rjmp	.+292    	; 0x172 <__bad_interrupt>
  4e:	00 00       	nop
  50:	90 c0       	rjmp	.+288    	; 0x172 <__bad_interrupt>
  52:	00 00       	nop
  54:	8e c0       	rjmp	.+284    	; 0x172 <__bad_interrupt>
  56:	00 00       	nop
  58:	8c c0       	rjmp	.+280    	; 0x172 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	8a c0       	rjmp	.+276    	; 0x172 <__bad_interrupt>
  5e:	00 00       	nop
  60:	88 c0       	rjmp	.+272    	; 0x172 <__bad_interrupt>
  62:	00 00       	nop
  64:	87 c0       	rjmp	.+270    	; 0x174 <__vector_25>
  66:	00 00       	nop
  68:	84 c0       	rjmp	.+264    	; 0x172 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	82 c0       	rjmp	.+260    	; 0x172 <__bad_interrupt>
  6e:	00 00       	nop
  70:	80 c0       	rjmp	.+256    	; 0x172 <__bad_interrupt>
  72:	00 00       	nop
  74:	7e c0       	rjmp	.+252    	; 0x172 <__bad_interrupt>
  76:	00 00       	nop
  78:	7c c0       	rjmp	.+248    	; 0x172 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	7a c0       	rjmp	.+244    	; 0x172 <__bad_interrupt>
  7e:	00 00       	nop
  80:	78 c0       	rjmp	.+240    	; 0x172 <__bad_interrupt>
  82:	00 00       	nop
  84:	76 c0       	rjmp	.+236    	; 0x172 <__bad_interrupt>
  86:	00 00       	nop
  88:	74 c0       	rjmp	.+232    	; 0x172 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	72 c0       	rjmp	.+228    	; 0x172 <__bad_interrupt>
  8e:	00 00       	nop
  90:	70 c0       	rjmp	.+224    	; 0x172 <__bad_interrupt>
  92:	00 00       	nop
  94:	6e c0       	rjmp	.+220    	; 0x172 <__bad_interrupt>
  96:	00 00       	nop
  98:	6c c0       	rjmp	.+216    	; 0x172 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	6a c0       	rjmp	.+212    	; 0x172 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	68 c0       	rjmp	.+208    	; 0x172 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	66 c0       	rjmp	.+204    	; 0x172 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	64 c0       	rjmp	.+200    	; 0x172 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	62 c0       	rjmp	.+196    	; 0x172 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	60 c0       	rjmp	.+192    	; 0x172 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	5e c0       	rjmp	.+188    	; 0x172 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	5c c0       	rjmp	.+184    	; 0x172 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	5a c0       	rjmp	.+180    	; 0x172 <__bad_interrupt>
  be:	00 00       	nop
  c0:	58 c0       	rjmp	.+176    	; 0x172 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	56 c0       	rjmp	.+172    	; 0x172 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	54 c0       	rjmp	.+168    	; 0x172 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	52 c0       	rjmp	.+164    	; 0x172 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	50 c0       	rjmp	.+160    	; 0x172 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	4e c0       	rjmp	.+156    	; 0x172 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	4c c0       	rjmp	.+152    	; 0x172 <__bad_interrupt>
  da:	00 00       	nop
  dc:	4a c0       	rjmp	.+148    	; 0x172 <__bad_interrupt>
  de:	00 00       	nop
  e0:	48 c0       	rjmp	.+144    	; 0x172 <__bad_interrupt>
  e2:	00 00       	nop
  e4:	e4 00       	.word	0x00e4	; ????
  e6:	e2 00       	.word	0x00e2	; ????
  e8:	e2 00       	.word	0x00e2	; ????
  ea:	e2 00       	.word	0x00e2	; ????
  ec:	e4 00       	.word	0x00e4	; ????
  ee:	e2 00       	.word	0x00e2	; ????
  f0:	e2 00       	.word	0x00e2	; ????
  f2:	e2 00       	.word	0x00e2	; ????
  f4:	e4 00       	.word	0x00e4	; ????
  f6:	e2 00       	.word	0x00e2	; ????
  f8:	e2 00       	.word	0x00e2	; ????
  fa:	e2 00       	.word	0x00e2	; ????
  fc:	e2 00       	.word	0x00e2	; ????
  fe:	e2 00       	.word	0x00e2	; ????
 100:	e4 00       	.word	0x00e4	; ????
 102:	e2 00       	.word	0x00e2	; ????
 104:	e2 00       	.word	0x00e2	; ????
 106:	dc 00       	.word	0x00dc	; ????
 108:	e2 00       	.word	0x00e2	; ????
 10a:	e2 00       	.word	0x00e2	; ????
 10c:	e4 00       	.word	0x00e4	; ????
 10e:	e2 00       	.word	0x00e2	; ????
 110:	e2 00       	.word	0x00e2	; ????
 112:	e2 00       	.word	0x00e2	; ????
 114:	e2 00       	.word	0x00e2	; ????
 116:	e2 00       	.word	0x00e2	; ????
 118:	e2 00       	.word	0x00e2	; ????
 11a:	e2 00       	.word	0x00e2	; ????
 11c:	e2 00       	.word	0x00e2	; ????
 11e:	e2 00       	.word	0x00e2	; ????
 120:	e2 00       	.word	0x00e2	; ????
 122:	e2 00       	.word	0x00e2	; ????
 124:	e4 00       	.word	0x00e4	; ????
 126:	e2 00       	.word	0x00e2	; ????
 128:	e2 00       	.word	0x00e2	; ????
 12a:	e2 00       	.word	0x00e2	; ????
 12c:	e4 00       	.word	0x00e4	; ????
 12e:	e2 00       	.word	0x00e2	; ????
 130:	e2 00       	.word	0x00e2	; ????
 132:	e2 00       	.word	0x00e2	; ????
 134:	e4 00       	.word	0x00e4	; ????
 136:	e2 00       	.word	0x00e2	; ????
 138:	e2 00       	.word	0x00e2	; ????
 13a:	e2 00       	.word	0x00e2	; ????
 13c:	e2 00       	.word	0x00e2	; ????
 13e:	e2 00       	.word	0x00e2	; ????
 140:	e4 00       	.word	0x00e4	; ????
 142:	e2 00       	.word	0x00e2	; ????
 144:	e2 00       	.word	0x00e2	; ????
 146:	df 00       	.word	0x00df	; ????
 148:	e2 00       	.word	0x00e2	; ????
 14a:	e2 00       	.word	0x00e2	; ????
 14c:	e4 00       	.word	0x00e4	; ????

0000014e <__ctors_end>:
 14e:	11 24       	eor	r1, r1
 150:	1f be       	out	0x3f, r1	; 63
 152:	cf ef       	ldi	r28, 0xFF	; 255
 154:	d1 e2       	ldi	r29, 0x21	; 33
 156:	de bf       	out	0x3e, r29	; 62
 158:	cd bf       	out	0x3d, r28	; 61
 15a:	00 e0       	ldi	r16, 0x00	; 0
 15c:	0c bf       	out	0x3c, r16	; 60

0000015e <__do_clear_bss>:
 15e:	22 e0       	ldi	r18, 0x02	; 2
 160:	a0 e0       	ldi	r26, 0x00	; 0
 162:	b2 e0       	ldi	r27, 0x02	; 2
 164:	01 c0       	rjmp	.+2      	; 0x168 <.do_clear_bss_start>

00000166 <.do_clear_bss_loop>:
 166:	1d 92       	st	X+, r1

00000168 <.do_clear_bss_start>:
 168:	a0 30       	cpi	r26, 0x00	; 0
 16a:	b2 07       	cpc	r27, r18
 16c:	e1 f7       	brne	.-8      	; 0x166 <.do_clear_bss_loop>
 16e:	4d d0       	rcall	.+154    	; 0x20a <main>
 170:	cd c0       	rjmp	.+410    	; 0x30c <_exit>

00000172 <__bad_interrupt>:
 172:	46 cf       	rjmp	.-372    	; 0x0 <__vectors>

00000174 <__vector_25>:
#include <avr/io.h>
#include <uart0.h>
#include <avr/interrupt.h>

ISR(USART0_RX_vect)
{
 174:	1f 92       	push	r1
 176:	0f 92       	push	r0
 178:	0f b6       	in	r0, 0x3f	; 63
 17a:	0f 92       	push	r0
 17c:	11 24       	eor	r1, r1
 17e:	0b b6       	in	r0, 0x3b	; 59
 180:	0f 92       	push	r0
 182:	2f 93       	push	r18
 184:	3f 93       	push	r19
 186:	4f 93       	push	r20
 188:	5f 93       	push	r21
 18a:	6f 93       	push	r22
 18c:	7f 93       	push	r23
 18e:	8f 93       	push	r24
 190:	9f 93       	push	r25
 192:	af 93       	push	r26
 194:	bf 93       	push	r27
 196:	ef 93       	push	r30
 198:	ff 93       	push	r31
	char c = UDR0;
 19a:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
	
	switch(c)
 19e:	82 2f       	mov	r24, r18
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	fc 01       	movw	r30, r24
 1a4:	e1 54       	subi	r30, 0x41	; 65
 1a6:	f1 09       	sbc	r31, r1
 1a8:	e5 33       	cpi	r30, 0x35	; 53
 1aa:	f1 05       	cpc	r31, r1
 1ac:	58 f4       	brcc	.+22     	; 0x1c4 <__vector_25+0x50>
 1ae:	88 27       	eor	r24, r24
 1b0:	ee 58       	subi	r30, 0x8E	; 142
 1b2:	ff 4f       	sbci	r31, 0xFF	; 255
 1b4:	8f 4f       	sbci	r24, 0xFF	; 255
 1b6:	a2 c0       	rjmp	.+324    	; 0x2fc <__tablejump2__>
		case 'I': case 'i':
		case 'O': case 'o':
		case 'U': case 'u':
		break;
		
		case 'R': uart0_putc('L');
 1b8:	8c e4       	ldi	r24, 0x4C	; 76
 1ba:	77 d0       	rcall	.+238    	; 0x2aa <uart0_putc>
		break;
		
		case 'r': uart0_putc('l');
 1bc:	05 c0       	rjmp	.+10     	; 0x1c8 <__vector_25+0x54>
 1be:	8c e6       	ldi	r24, 0x6C	; 108
		break;
 1c0:	74 d0       	rcall	.+232    	; 0x2aa <uart0_putc>
		
		default: uart0_putc(c);
 1c2:	02 c0       	rjmp	.+4      	; 0x1c8 <__vector_25+0x54>
 1c4:	82 2f       	mov	r24, r18
 1c6:	71 d0       	rcall	.+226    	; 0x2aa <uart0_putc>
	}
	
}
 1c8:	ff 91       	pop	r31
 1ca:	ef 91       	pop	r30
 1cc:	bf 91       	pop	r27
 1ce:	af 91       	pop	r26
 1d0:	9f 91       	pop	r25
 1d2:	8f 91       	pop	r24
 1d4:	7f 91       	pop	r23
 1d6:	6f 91       	pop	r22
 1d8:	5f 91       	pop	r21
 1da:	4f 91       	pop	r20
 1dc:	3f 91       	pop	r19
 1de:	2f 91       	pop	r18
 1e0:	0f 90       	pop	r0
 1e2:	0b be       	out	0x3b, r0	; 59
 1e4:	0f 90       	pop	r0
 1e6:	0f be       	out	0x3f, r0	; 63
 1e8:	0f 90       	pop	r0
 1ea:	1f 90       	pop	r1
 1ec:	18 95       	reti

000001ee <init>:

void init()
{
	// uart0
	uart0_init(9600, UART_M_TRANSCEIVE, UART_P_EVEN);
 1ee:	21 e0       	ldi	r18, 0x01	; 1
 1f0:	42 e0       	ldi	r20, 0x02	; 2
 1f2:	60 e8       	ldi	r22, 0x80	; 128
 1f4:	75 e2       	ldi	r23, 0x25	; 37
 1f6:	80 e0       	ldi	r24, 0x00	; 0
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	09 d0       	rcall	.+18     	; 0x20e <uart0_init>
	
	UCSR0B |= (1 << RXCIE0); // enable recieve interrupt
 1fc:	e1 ec       	ldi	r30, 0xC1	; 193
 1fe:	f0 e0       	ldi	r31, 0x00	; 0
 200:	80 81       	ld	r24, Z
 202:	80 68       	ori	r24, 0x80	; 128
 204:	80 83       	st	Z, r24
	sei();
 206:	78 94       	sei
 208:	08 95       	ret

0000020a <main>:
}


int main(void)
{
    init();
 20a:	f1 df       	rcall	.-30     	; 0x1ee <init>
 20c:	ff cf       	rjmp	.-2      	; 0x20c <main+0x2>

0000020e <uart0_init>:

uint8_t uart0_getc()
{
	while(!(UCSR0A & (1 << RXC0)));
	return UDR0;
}
 20e:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
 212:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7c00c1>
 216:	41 30       	cpi	r20, 0x01	; 1
 218:	51 f0       	breq	.+20     	; 0x22e <uart0_init+0x20>
 21a:	18 f0       	brcs	.+6      	; 0x222 <uart0_init+0x14>
 21c:	42 30       	cpi	r20, 0x02	; 2
 21e:	69 f0       	breq	.+26     	; 0x23a <uart0_init+0x2c>
 220:	11 c0       	rjmp	.+34     	; 0x244 <uart0_init+0x36>
 222:	e1 ec       	ldi	r30, 0xC1	; 193
 224:	f0 e0       	ldi	r31, 0x00	; 0
 226:	30 81       	ld	r19, Z
 228:	30 61       	ori	r19, 0x10	; 16
 22a:	30 83       	st	Z, r19
 22c:	0b c0       	rjmp	.+22     	; 0x244 <uart0_init+0x36>
 22e:	e1 ec       	ldi	r30, 0xC1	; 193
 230:	f0 e0       	ldi	r31, 0x00	; 0
 232:	30 81       	ld	r19, Z
 234:	38 60       	ori	r19, 0x08	; 8
 236:	30 83       	st	Z, r19
 238:	05 c0       	rjmp	.+10     	; 0x244 <uart0_init+0x36>
 23a:	e1 ec       	ldi	r30, 0xC1	; 193
 23c:	f0 e0       	ldi	r31, 0x00	; 0
 23e:	30 81       	ld	r19, Z
 240:	38 61       	ori	r19, 0x18	; 24
 242:	30 83       	st	Z, r19
 244:	3e e0       	ldi	r19, 0x0E	; 14
 246:	30 93 c2 00 	sts	0x00C2, r19	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7c00c2>
 24a:	21 30       	cpi	r18, 0x01	; 1
 24c:	19 f0       	breq	.+6      	; 0x254 <uart0_init+0x46>
 24e:	22 30       	cpi	r18, 0x02	; 2
 250:	39 f0       	breq	.+14     	; 0x260 <uart0_init+0x52>
 252:	0b c0       	rjmp	.+22     	; 0x26a <uart0_init+0x5c>
 254:	e2 ec       	ldi	r30, 0xC2	; 194
 256:	f0 e0       	ldi	r31, 0x00	; 0
 258:	20 81       	ld	r18, Z
 25a:	20 62       	ori	r18, 0x20	; 32
 25c:	20 83       	st	Z, r18
 25e:	05 c0       	rjmp	.+10     	; 0x26a <uart0_init+0x5c>
 260:	e2 ec       	ldi	r30, 0xC2	; 194
 262:	f0 e0       	ldi	r31, 0x00	; 0
 264:	20 81       	ld	r18, Z
 266:	20 63       	ori	r18, 0x30	; 48
 268:	20 83       	st	Z, r18
 26a:	dc 01       	movw	r26, r24
 26c:	cb 01       	movw	r24, r22
 26e:	88 0f       	add	r24, r24
 270:	99 1f       	adc	r25, r25
 272:	aa 1f       	adc	r26, r26
 274:	bb 1f       	adc	r27, r27
 276:	88 0f       	add	r24, r24
 278:	99 1f       	adc	r25, r25
 27a:	aa 1f       	adc	r26, r26
 27c:	bb 1f       	adc	r27, r27
 27e:	9c 01       	movw	r18, r24
 280:	ad 01       	movw	r20, r26
 282:	22 0f       	add	r18, r18
 284:	33 1f       	adc	r19, r19
 286:	44 1f       	adc	r20, r20
 288:	55 1f       	adc	r21, r21
 28a:	22 0f       	add	r18, r18
 28c:	33 1f       	adc	r19, r19
 28e:	44 1f       	adc	r20, r20
 290:	55 1f       	adc	r21, r21
 292:	60 e0       	ldi	r22, 0x00	; 0
 294:	74 e2       	ldi	r23, 0x24	; 36
 296:	84 ef       	ldi	r24, 0xF4	; 244
 298:	90 e0       	ldi	r25, 0x00	; 0
 29a:	0e d0       	rcall	.+28     	; 0x2b8 <__udivmodsi4>
 29c:	21 50       	subi	r18, 0x01	; 1
 29e:	31 09       	sbc	r19, r1
 2a0:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7c00c5>
 2a4:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7c00c4>
 2a8:	08 95       	ret

000002aa <uart0_putc>:


void uart0_putc(char c)
{
	// send c to uart0
	while(!(UCSR0A & (1 << UDRE0)));
 2aa:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
 2ae:	95 ff       	sbrs	r25, 5
 2b0:	fc cf       	rjmp	.-8      	; 0x2aa <uart0_putc>
	UDR0 = c;
 2b2:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
 2b6:	08 95       	ret

000002b8 <__udivmodsi4>:
 2b8:	a1 e2       	ldi	r26, 0x21	; 33
 2ba:	1a 2e       	mov	r1, r26
 2bc:	aa 1b       	sub	r26, r26
 2be:	bb 1b       	sub	r27, r27
 2c0:	fd 01       	movw	r30, r26
 2c2:	0d c0       	rjmp	.+26     	; 0x2de <__udivmodsi4_ep>

000002c4 <__udivmodsi4_loop>:
 2c4:	aa 1f       	adc	r26, r26
 2c6:	bb 1f       	adc	r27, r27
 2c8:	ee 1f       	adc	r30, r30
 2ca:	ff 1f       	adc	r31, r31
 2cc:	a2 17       	cp	r26, r18
 2ce:	b3 07       	cpc	r27, r19
 2d0:	e4 07       	cpc	r30, r20
 2d2:	f5 07       	cpc	r31, r21
 2d4:	20 f0       	brcs	.+8      	; 0x2de <__udivmodsi4_ep>
 2d6:	a2 1b       	sub	r26, r18
 2d8:	b3 0b       	sbc	r27, r19
 2da:	e4 0b       	sbc	r30, r20
 2dc:	f5 0b       	sbc	r31, r21

000002de <__udivmodsi4_ep>:
 2de:	66 1f       	adc	r22, r22
 2e0:	77 1f       	adc	r23, r23
 2e2:	88 1f       	adc	r24, r24
 2e4:	99 1f       	adc	r25, r25
 2e6:	1a 94       	dec	r1
 2e8:	69 f7       	brne	.-38     	; 0x2c4 <__udivmodsi4_loop>
 2ea:	60 95       	com	r22
 2ec:	70 95       	com	r23
 2ee:	80 95       	com	r24
 2f0:	90 95       	com	r25
 2f2:	9b 01       	movw	r18, r22
 2f4:	ac 01       	movw	r20, r24
 2f6:	bd 01       	movw	r22, r26
 2f8:	cf 01       	movw	r24, r30
 2fa:	08 95       	ret

000002fc <__tablejump2__>:
 2fc:	ee 0f       	add	r30, r30
 2fe:	ff 1f       	adc	r31, r31
 300:	88 1f       	adc	r24, r24
 302:	8b bf       	out	0x3b, r24	; 59
 304:	07 90       	elpm	r0, Z+
 306:	f6 91       	elpm	r31, Z
 308:	e0 2d       	mov	r30, r0
 30a:	19 94       	eijmp

0000030c <_exit>:
 30c:	f8 94       	cli

0000030e <__stop_program>:
 30e:	ff cf       	rjmp	.-2      	; 0x30e <__stop_program>
